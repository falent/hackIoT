"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class YAMLParser {
    constructor(yamlContents) {
        this.yamlContents = yamlContents;
    }
    static countAtStart(line, value) {
        let count = 0;
        while (true) {
            if (line.startsWith(value)) {
                count++;
                line = line.slice(value.length);
            }
            else {
                break;
            }
        }
        return count;
    }
    parse() {
        const lines = this.yamlContents.split(YAMLParser.NEWLINE);
        const context = new YAMLContext();
        context.push(new Value(0, 0, undefined, []));
        for (const line of lines) {
            if (line.startsWith("#")) {
                continue;
            }
            context.lineNumber++;
            this.parseLine(line, context);
        }
        return context.root().array();
    }
    parseLine(line, context) {
        const cleanLine = line.trim();
        let tabs = 0;
        if (cleanLine.length > 0) {
            YAMLParser.countAtStart(line, YAMLParser.TAB);
            if (tabs === 0) {
                tabs = YAMLParser.countAtStart(line, YAMLParser.TWO_SPACES);
            }
        }
        if (tabs - context.tabs > 1) {
            throw new Error("INVALID - Line " + context.lineNumber + ": previous line is "
                + context.tabs + ". This line is: " + tabs
                + ". Cannot increase indent by more than one tab");
        }
        context.popTo(tabs);
        if (cleanLine.length === 0) {
            context.push(new Value(context.lineNumber, tabs, undefined, null));
        }
        else if (cleanLine.endsWith(":")) {
            const name = cleanLine.substring(0, cleanLine.length - 1);
            context.push(new Value(context.lineNumber, tabs, name));
        }
        else if (cleanLine.startsWith("- ")) {
            context.top().value([]);
            const arrayValue = cleanLine.substring(2).trim();
            context.top().array().push(new Value(context.lineNumber, tabs, undefined, arrayValue));
        }
        else {
            const name = cleanLine.split(":")[0].trim();
            const value = cleanLine.split(":").slice(1).join(":").trim();
            context.push(new Value(context.lineNumber, tabs, name, value));
        }
    }
}
YAMLParser.TAB = "\t";
YAMLParser.NEWLINE = "\n";
YAMLParser.TWO_SPACES = "  ";
exports.YAMLParser = YAMLParser;
class YAMLContext {
    constructor() {
        this.lineNumber = 0;
        this.tabs = 0;
        this.stack = [];
    }
    top() {
        return this.stack[this.stack.length - 1];
    }
    root() {
        return this.stack[0];
    }
    popTo(tabs) {
        this.tabs = tabs;
        if (tabs >= this.stack.length) {
            return;
        }
        this.stack = this.stack.slice(0, tabs + 1);
    }
    push(value) {
        if (this.stack.length > 0) {
            if (this.top().isArray()) {
                this.top().array().push(value);
            }
            else {
                if (!this.top().value()) {
                    this.top().value({});
                }
                this.top().value()[value.name()] = value;
            }
        }
        this.stack.push(value);
    }
}
exports.YAMLContext = YAMLContext;
class Value {
    constructor(line, tabs, _name, _value) {
        this.line = line;
        this.tabs = tabs;
        this._name = _name;
        this._value = _value;
    }
    static cleanString(s) {
        if (!s) {
            return undefined;
        }
        if (s.startsWith("'") || s.startsWith("\"")) {
            s = s.substring(1);
        }
        if (s.endsWith("'") || s.endsWith("\"")) {
            s = s.substring(0, s.length - 1);
        }
        return s;
    }
    name() {
        return Value.cleanString(this._name);
    }
    isArray() {
        return Array.isArray(this._value);
    }
    isNull() {
        return this._value === null;
    }
    isString() {
        return (typeof this._value) === "string";
    }
    isEmpty() {
        return this._value.length === 0;
    }
    isObject() {
        return (typeof this._value) === "object";
    }
    object() {
        const o = this._value;
        const newObject = {};
        for (const key of Object.keys(o)) {
            const value = o[key];
            let flatValue;
            if (value.isString()) {
                flatValue = value.string();
            }
            else if (value.isArray()) {
                flatValue = value.stringArray();
            }
            else if (value.isObject()) {
                flatValue = value.object();
            }
            newObject[key] = flatValue;
        }
        return newObject;
    }
    array() {
        return this._value;
    }
    stringArray() {
        const strings = [];
        for (const value of this.array()) {
            strings.push(value.string());
        }
        return strings;
    }
    string() {
        return Value.cleanString(this._value);
    }
    toString() {
        return "Name: " + this._name + " Value: " + this._value;
    }
    value(v) {
        if (!v) {
            return this._value;
        }
        if (this._value) {
            return this._value;
        }
        this._value = v;
        return this._value;
    }
}
exports.Value = Value;
//# sourceMappingURL=YAMLParser.js.map