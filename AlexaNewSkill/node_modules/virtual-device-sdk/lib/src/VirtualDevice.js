"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const https = require("https");
const URL = require("url");
class VirtualDevice {
    constructor(token, locale, voiceID) {
        this.token = token;
        this.locale = locale;
        this.voiceID = voiceID;
        this.baseURL = process.env.VIRTUAL_DEVICE_BASE_URL
            ? process.env.VIRTUAL_DEVICE_BASE_URL
            : "https://virtual-device.bespoken.io";
    }
    normalizeMessage(message) {
        if (message.trim().split(" ").length === 1) {
            message = "alexa " + message;
        }
        return message;
    }
    message(message, debug) {
        message = this.normalizeMessage(message);
        let url = this.baseURL + "/process?message=" + message + "&user_id=" + this.token;
        if (debug) {
            url += "&debug=true";
        }
        if (this.locale) {
            url += "&language_code=" + this.locale;
        }
        if (this.voiceID) {
            url += "&voice_id=" + this.voiceID;
        }
        url = encodeURI(url);
        return new Promise((resolve, reject) => {
            const callback = (response) => {
                let data = "";
                response.on("data", (chunk) => {
                    data += chunk;
                });
                response.on("end", () => {
                    if (response.statusCode === 200) {
                        const result = JSON.parse(data);
                        result.transcript = this.normalizeTranscript(result.transcript);
                        result.message = message;
                        resolve(result);
                    }
                    else {
                        reject(data);
                    }
                });
            };
            const request = https.get(url, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.end();
        });
    }
    batchMessage(messages, debug) {
        for (let i = 0; i < messages.length; i++) {
            messages[i] = this.normalizeMessage(messages[i]);
        }
        let path = "/batch_process?user_id=" + this.token;
        if (debug) {
            path += "&debug=true";
        }
        if (this.locale) {
            path += "&language_code=" + this.locale;
        }
        if (this.voiceID) {
            path += "&voice_id=" + this.voiceID;
        }
        const url = URL.parse(this.baseURL);
        return new Promise((resolve, reject) => {
            const callback = (response) => {
                let data = "";
                response.on("data", (chunk) => {
                    data += chunk;
                });
                response.on("end", () => {
                    if (response.statusCode === 200) {
                        resolve(this.handleBatchResponse(data));
                    }
                    else {
                        reject(data);
                    }
                });
            };
            const input = {
                messages,
            };
            const inputString = JSON.stringify(input);
            const requestOptions = {
                headers: {
                    "Content-Length": new Buffer(inputString).length,
                    "Content-Type": "application/json",
                },
                host: url.hostname,
                method: "POST",
                path,
                port: 443,
            };
            const request = https.request(requestOptions, callback);
            request.on("error", function (error) {
                reject(error);
            });
            request.write(inputString);
            request.end();
        });
    }
    resetSession(locale) {
        let message = "quit";
        if (locale && locale === "de-DE") {
            message = "stopp";
        }
        return this.message(message);
    }
    handleBatchResponse(data) {
        const json = JSON.parse(data);
        const results = [];
        for (const result of json.results) {
            result.transcript = this.normalizeTranscript(result.transcript);
            results.push(result);
        }
        return results;
    }
    normalizeTranscript(transcript) {
        if (!transcript) {
            return null;
        }
        return transcript.toLowerCase();
    }
}
exports.VirtualDevice = VirtualDevice;
//# sourceMappingURL=VirtualDevice.js.map