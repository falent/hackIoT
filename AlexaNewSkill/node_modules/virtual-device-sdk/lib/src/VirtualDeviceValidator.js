"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const https = require("https");
const VirtualDevice_1 = require("./VirtualDevice");
exports.VirtualDeviceScriptUnauthorizedError = new Error("Security token lacks sufficient " +
    "information. Please re-authenticate with Amazon here to update your security token.");
exports.VirtualDeviceValidatorUnauthorizedMessage = (invocationName) => {
    return "Security token lacks sufficient " +
        `permissions to invoke "${invocationName}" skill.<br><br>` +
        "To correct this, make sure in the " +
        `<a href="https://developer.amazon.com/edw/home.html#/" target="_blank">` +
        "Alexa developer console</a> that the skill is associated with your account.<br><br>" +
        "If you are still having issues, contact us " +
        `<a href="mailto:support@bespoken.io">support@bespoken.io</a>.`;
};
class VirtualDeviceValidator {
    constructor(token, userID) {
        this.token = token;
        this.subscribers = { message: [], result: [], unauthorized: [] };
        this.sourceAPIBaseURL = process.env.SOURCE_API_BASE_URL
            ? process.env.SOURCE_API_BASE_URL
            : "https://source-api.bespoken.tools";
        this.userID = userID;
    }
    execute(virtualDeviceTestSequences, context) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = { tests: [] };
            for (const sequence of virtualDeviceTestSequences) {
                try {
                    yield this.checkAuth(sequence.invocationName);
                }
                catch (err) {
                    this.emit("unauthorized", exports.VirtualDeviceScriptUnauthorizedError, undefined, context);
                    throw err;
                }
                yield this.executeSequence(sequence, result, context);
            }
            const failures = result.tests.filter((test) => test.result === "failure");
            if (failures && failures.length > 0) {
                result.result = "failure";
            }
            else {
                result.result = "success";
            }
            return Promise.resolve(result);
        });
    }
    locale(locale) {
        this._locale = locale;
    }
    subscribe(event, cb) {
        if (event in this.subscribers) {
            this.subscribers[event].push(cb);
        }
    }
    unsubscribe(event) {
        this.subscribers[event] = [];
    }
    voiceID(voiceID) {
        this._voiceID = voiceID;
    }
    checkAuth(invocationName) {
        if (!this.userID) {
            return Promise.resolve("AUTHORIZED");
        }
        return new Promise((resolve, reject) => {
            let data = "";
            const params = `?invocation_name=${invocationName}` +
                `&user_id=${this.userID}`;
            const url = this.sourceAPIBaseURL + "/v1/skillAuthorized" + params;
            const req = https.get(url, (res) => {
                res.on("data", (chunk) => {
                    data += chunk;
                });
                res.on("end", () => {
                    if (res.statusCode === 200 && data === "AUTHORIZED") {
                        resolve(data);
                    }
                    else {
                        reject(exports.VirtualDeviceValidatorUnauthorizedMessage(invocationName));
                    }
                });
            });
            req.on("error", function (error) {
                reject(error.message);
            });
            req.end();
        });
    }
    emit(event, error, data, context) {
        if (event in this.subscribers) {
            this.subscribers[event].forEach((subscriber) => {
                subscriber(error, data, context);
            });
        }
    }
    virtualDevice(sequence) {
        let token = this.token ? this.token : process.env.VIRTUAL_DEVICE_TOKEN;
        let tokenName;
        if (sequence.locale) {
            tokenName = "VIRTUAL_DEVICE_TOKEN_" + sequence.locale.toUpperCase().replace("-", "_");
            if (process.env[tokenName]) {
                token = process.env[tokenName];
            }
        }
        if (!token) {
            if (tokenName) {
                throw new Error("No environment variable specified for VIRTUAL_DEVICE_TOKEN or " + tokenName);
            }
            else {
                throw new Error("No environment variable specified for VIRTUAL_DEVICE_TOKEN");
            }
        }
        const locale = this._locale ? this._locale : sequence.locale;
        const voiceID = this._voiceID ? this._voiceID : sequence.voiceID;
        return new VirtualDevice_1.VirtualDevice(token, locale, voiceID);
    }
}
exports.VirtualDeviceValidator = VirtualDeviceValidator;
class ValidatorError {
    constructor(message, property, expected, actual) {
        this.message = message;
        this.property = property;
        this.expected = expected;
        this.actual = actual;
    }
    static asArray(message) {
        return [new ValidatorError(message)];
    }
    static propertyError(property, expected, actual) {
        return new ValidatorError(undefined, property, expected, actual);
    }
}
exports.ValidatorError = ValidatorError;
class Validator {
    static checkString(property, value, expected) {
        if (!expected) {
            return undefined;
        }
        if (!value) {
            return ValidatorError.propertyError(property, expected, value);
        }
        if (Array.isArray(expected)) {
            for (const expectedValue of expected) {
                if (Validator.toRegex(expectedValue).test(value)) {
                    return undefined;
                }
            }
            return ValidatorError.propertyError(property, expected, value);
        }
        else {
            const matches = Validator.toRegex(expected).test(value);
            if (matches) {
                return undefined;
            }
            else {
                return ValidatorError.propertyError(property, expected, value);
            }
        }
    }
    static checkObject(parentProperty, value, expected) {
        if (!expected) {
            return undefined;
        }
        if (!value) {
            return ValidatorError.propertyError(parentProperty, expected, value);
        }
        for (const property of Object.keys(expected)) {
            const expectedPropertyValue = expected[property];
            const actualPropertyValue = value[property];
            let fullProperty = property;
            if (parentProperty) {
                fullProperty = parentProperty + "." + property;
            }
            if (typeof expectedPropertyValue === "string") {
                const error = Validator.checkString(fullProperty, actualPropertyValue, expectedPropertyValue);
                if (error) {
                    return error;
                }
            }
            else {
                const error = Validator.checkObject(fullProperty, actualPropertyValue, expectedPropertyValue);
                if (error) {
                    return error;
                }
            }
        }
        return undefined;
    }
    static toRegex(expectedValue) {
        return new RegExp(expectedValue.trim().split("*").join(".*"));
    }
    constructor(resultItem, error) {
        this.resultItem = resultItem;
        this.error = error;
    }
    check() {
        if (this.error) {
            return ValidatorError.asArray(this.error.message);
        }
        if (this.resultItem.test.comparison !== "contains") {
            return ValidatorError.asArray("Invalid test comparison: " + this.resultItem.test.comparison);
        }
        if (!this.resultItem.actual) {
            return ValidatorError.asArray("Invalid test result - no result");
        }
        if (!this.resultItem.test.expected) {
            return [];
        }
        const transcriptError = Validator.checkString("transcript", this.resultItem.actual.transcript, this.resultItem.test.expected.transcript);
        const streamError = Validator.checkString("streamURL", this.resultItem.actual.streamURL, this.resultItem.test.expected.streamURL);
        const cardError = Validator.checkObject("card", this.resultItem.actual.card, this.resultItem.test.expected.card);
        const errors = [];
        if (transcriptError) {
            errors.push(transcriptError);
        }
        if (streamError) {
            errors.push(streamError);
        }
        if (cardError) {
            errors.push(cardError);
        }
        return errors;
    }
}
exports.Validator = Validator;
//# sourceMappingURL=VirtualDeviceValidator.js.map