"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const events_1 = require("events");
const request = require("request");
const AudioPlayer_1 = require("./AudioPlayer");
const SkillContext_1 = require("./SkillContext");
const SkillRequest_1 = require("./SkillRequest");
const Utterance_1 = require("./Utterance");
var AlexaEvent;
(function (AlexaEvent) {
    AlexaEvent[AlexaEvent["SessionEnded"] = 0] = "SessionEnded";
    AlexaEvent[AlexaEvent["SkillError"] = 1] = "SkillError";
    AlexaEvent[AlexaEvent["SkillResponse"] = 2] = "SkillResponse";
})(AlexaEvent = exports.AlexaEvent || (exports.AlexaEvent = {}));
class SkillInteractor {
    constructor() {
        this.actionQueue = new ActionQueue();
        this.skillContext = null;
        this.emitter = null;
        this.emitter = new events_1.EventEmitter();
    }
    startSession(skillURL, model, audioEnabled, applicationID) {
        let audioPlayer = null;
        if (audioEnabled) {
            audioPlayer = new AudioPlayer_1.AudioPlayer(this);
        }
        this.skillContext = new SkillContext_1.SkillContext(skillURL, model, audioPlayer, applicationID);
        this.skillContext.newSession();
        return this;
    }
    context() {
        return this.skillContext;
    }
    spoken(utteranceString, callback) {
        let utterance = new Utterance_1.Utterance(this.interactionModel(), utteranceString);
        if (!utterance.matched()) {
            const defaultPhrase = this.interactionModel().sampleUtterances.defaultUtterance();
            utterance = new Utterance_1.Utterance(this.interactionModel(), defaultPhrase.phrase);
            console.warn("No intentName matches utterance: " + utterance
                + ". Using fallback utterance: " + defaultPhrase.phrase);
        }
        this.callSkillWithIntent(utterance.intent(), utterance.toJSON(), callback);
    }
    launched(callback) {
        const serviceRequest = new SkillRequest_1.SkillRequest(this.skillContext);
        serviceRequest.launchRequest();
        this.callSkill(serviceRequest, callback);
    }
    sessionEnded(sessionEndedReason, errorData, callback) {
        if (sessionEndedReason === SkillRequest_1.SessionEndedReason.ERROR) {
            console.error("SessionEndedRequest:\n" + JSON.stringify(errorData, null, 2));
        }
        const serviceRequest = new SkillRequest_1.SkillRequest(this.skillContext);
        serviceRequest.sessionEndedRequest(sessionEndedReason, errorData);
        this.callSkill(serviceRequest, callback);
        this.context().endSession();
    }
    intended(intentName, slots, callback) {
        this.callSkillWithIntent(intentName, slots, callback);
    }
    callSkill(serviceRequest, callback) {
        this.sequence(function (done) {
            this.callSkillImpl(serviceRequest, callback, done);
        });
    }
    sequence(action) {
        this.actionQueue.enqueue(action);
    }
    on(event, callback) {
        this.emitter.on(AlexaEvent[event], callback);
    }
    once(event, callback) {
        this.emitter.once(AlexaEvent[event], callback);
    }
    stop(onStop) {
        this.actionQueue.stop(function () {
            onStop();
        });
    }
    post(options, responseHandler) {
        request.post(options, responseHandler);
    }
    callSkillWithIntent(intentName, slots, callback) {
        try {
            if (this.skillContext.audioPlayerEnabled() && this.skillContext.audioPlayer().isPlaying()) {
                this.skillContext.audioPlayer().suspend();
            }
            const serviceRequest = new SkillRequest_1.SkillRequest(this.skillContext).intentRequest(intentName);
            if (slots !== undefined && slots !== null) {
                for (const slotName of Object.keys(slots)) {
                    serviceRequest.withSlot(slotName, slots[slotName]);
                }
            }
            this.callSkill(serviceRequest, function (error, responseJSON, requestJSON) {
                if (callback !== undefined && callback !== null) {
                    callback(error, responseJSON, requestJSON);
                }
                if (this.skillContext.audioPlayerEnabled() && this.skillContext.audioPlayer().suspended()) {
                    this.skillContext.audioPlayer().resume();
                }
            });
        }
        catch (e) {
            if (callback !== undefined && callback !== null) {
                callback(e, null, null);
            }
        }
    }
    callSkillImpl(serviceRequest, callback, done) {
        if (serviceRequest.requiresSession() && !this.context().activeSession()) {
            this.context().newSession();
        }
        const requestJSON = serviceRequest.toJSON();
        console.debug("CALLING: " + requestJSON.request.type);
        const responseHandler = function (error, response, body) {
            if (this.context().activeSession()) {
                this.context().session().used();
                if (!error) {
                    if (body.response !== undefined && body.response.shouldEndSession) {
                        this.context().endSession();
                    }
                    else {
                        this.context().session().updateAttributes(body.sessionAttributes);
                    }
                }
            }
            if (error) {
                if (callback !== undefined && callback !== null) {
                    callback(error, null, null);
                }
            }
            else {
                if (body.response !== undefined && body.response.directives !== undefined) {
                    this.context().audioPlayer().directivesReceived(body.response.directives);
                }
                if (callback !== undefined && callback !== null) {
                    callback(null, body, requestJSON);
                }
                this.emitter.emit(AlexaEvent[AlexaEvent.SkillResponse], body, requestJSON);
            }
            done();
        };
        this.post({
            json: requestJSON,
            method: "POST",
            url: this.context().skillURL(),
        }, responseHandler);
    }
    interactionModel() {
        return this.context().interactionModel();
    }
}
exports.SkillInteractor = SkillInteractor;
class ActionQueue {
    constructor() {
        this._queue = [];
        this._stop = false;
    }
    enqueue(action) {
        this._queue.push(action);
        if (this._queue.length === 1) {
            this.next();
        }
    }
    processing() {
        return (this._queue.length > 0);
    }
    next() {
        if (this._queue.length === 0) {
            return;
        }
        const action = this._queue[0];
        action(function () {
            this._queue = this._queue.slice(1);
            if (this._stop) {
                this._stopCallback();
            }
            else {
                this.next();
            }
        });
    }
    stop(onStop) {
        this._stop = true;
        if (this.processing()) {
            this._stopCallback = onStop;
        }
        else {
            onStop();
        }
    }
}
exports.ActionQueue = ActionQueue;
//# sourceMappingURL=SkillInstance.js.map